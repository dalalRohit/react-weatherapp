{"version":3,"sources":["Compo/Footer/Footer.js","hoc/Layout/Layout.js","Compo/UI/Spinner/Spinner.js","Compo/Result/Result.js","Compo/Error/Error.js","Containers/Form/Form.js","Containers/Main/Main.js","App.js","serviceWorker.js","index.js","Compo/Footer/Footer.css","Containers/Main/Main.css","Containers/Form/Form.css","Compo/UI/Spinner/Spinner.css","Compo/Result/Result.css","Compo/Error/Error.css"],"names":["footer","props","react_default","a","createElement","className","classes","Footer","Social","target","href","Layout","this","children","Footer_Footer","Component","spinner","style","display","show","loader","result","Result","city","country","temp","max","min","humidity","pressure","error","Error","Form","state","spin","handleTextInput","event","value","_this","setState","trim","handleForm","preventDefault","length","url","concat","axios","get","then","res","console","log","data","status","Object","objectSpread","main","sys","catch","err","alert","_this2","Error_Error","x","Result_Result","temp_max","temp_min","onSubmit","MainForm","TextField_default","id","label","type","margin","autoFocus","autoComplete","onChange","Button_default","variant","color","Spinner_Spinner","Main","textAlign","Containers_Form_Form","App","react_router_dom","hoc_Layout_Layout","Containers_Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","load8"],"mappings":"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","file":"static/js/main.85657ad1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Footer.css';\r\n\r\nconst footer = (props) => {\r\n    return (\r\n        <div className={classes.Footer}>\r\n            <h4>WeatherApp</h4>\r\n\r\n            <div className={classes.Social}>\r\n                <h4>Developed by <a target=\"_blank\" href='https://www.linkedin.com/in/rohit-dalal-61330116b/'> Rohit Dalal</a> </h4>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default footer;","import React, { Component } from 'react';\r\n\r\nimport Footer from './../../Compo/Footer/Footer';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.children}\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Layout;","import React from 'react';\r\n\r\n//css\r\nimport classes from './Spinner.css';\r\n\r\nconst spinner = (props) => {\r\n    return (\r\n        <div style={{\r\n            display: props.show ? 'block' : 'none'\r\n        }} className={classes.loader}>Loading...</div>\r\n    )\r\n}\r\n\r\nexport default spinner;","import React from 'react';\r\n\r\n//css\r\nimport classes from './Result.css';\r\n\r\nconst result = (props) => {\r\n    return (\r\n        <div className={classes.Result}>\r\n            <b> <i>{props.city} : {props.country} </i></b>\r\n            <p>Temprature : {props.temp}</p>\r\n            <p>Max/Min : {props.max}/{props.min}</p>\r\n            <p>Humidity : {props.humidity}</p>\r\n            <p>Pressure : {props.pressure}</p>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default result;","import React from 'react';\r\n\r\nimport classes from './Error.css';\r\n\r\nconst error = (props) => {\r\n    return (\r\n        <div className={classes.Error}>\r\n            {props.error}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default error;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n//css\r\nimport classes from './Form.css';\r\n\r\n//Spinner\r\nimport Spinner from './../../Compo/UI/Spinner/Spinner';\r\n//Result\r\nimport Result from './../../Compo/Result/Result';\r\n//Error\r\nimport Error from './../../Compo/Error/Error';\r\n//Material UI\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nclass Form extends Component {\r\n    state = {\r\n        city: '',\r\n        result: null,\r\n        error: '',\r\n        spin: false\r\n    }\r\n    handleTextInput = (event) => {\r\n        let city = event.target.value;\r\n\r\n        this.setState({ city: city.trim() })\r\n        this.setState({ result: null })\r\n        this.setState({ error: '' })\r\n\r\n    }\r\n\r\n    handleForm = (event) => {\r\n\r\n        let city = this.state.city;\r\n        event.preventDefault();\r\n        this.setState({ spin: true })\r\n\r\n        if (city.length > 0) {\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=49c88b8d7a7ddbbce3575460d8f1f5e5&units=metric`\r\n\r\n            //fetch weather data\r\n            axios.get(url)\r\n                .then((res) => {\r\n                    console.log(res.data)\r\n                    if (res.status === 200) {\r\n                        //clear error in state\r\n                        this.setState({ error: '' })\r\n\r\n                        //set fetched details\r\n                        let result = { ...res.data.main }\r\n                        result['country'] = res.data.sys.country\r\n                        this.setState({ result })\r\n                        this.setState({ spin: false })\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    this.setState({ error: `Weather for ${city} not found!` })\r\n                    this.setState({ spin: false })\r\n                })\r\n        }\r\n        else {\r\n            alert('Empty city')\r\n        }\r\n\r\n    }\r\n    render() {\r\n        let error = null;\r\n        if (this.state.error.length > 0) {\r\n            error = <Error error={this.state.error} />;\r\n        }\r\n\r\n        let result = null;\r\n        if (this.state.result) {\r\n            let x = { ...this.state.result };\r\n            result = <Result\r\n                city={this.state.city}\r\n                temp={x.temp}\r\n                pressure={x.pressure}\r\n                humidity={x.humidity}\r\n                max={x.temp_max}\r\n                min={x.temp_min}\r\n                country={x.country} />\r\n        }\r\n        return (\r\n            <div>\r\n                <form\r\n                    onSubmit={(event) => this.handleForm(event)}>\r\n                    {error}\r\n                    <div className={classes.MainForm}>\r\n                        <TextField\r\n                            id=\"input-city\"\r\n                            label=\"City\"\r\n                            type=\"text\"\r\n                            margin=\"normal\"\r\n                            autoFocus\r\n                            autoComplete=\"off\"\r\n                            onChange={(event) => this.handleTextInput(event)}\r\n                            value={this.state.city}\r\n                        />\r\n\r\n                        <Button variant=\"outlined\" color=\"primary\" >Submit</Button>\r\n                    </div>\r\n\r\n\r\n                </form>\r\n                {result}\r\n                <Spinner show={this.state.spin} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\n//css\r\nimport classes from './Main.css';\r\n//Form\r\nimport Form from './../Form/Form'\r\n\r\nclass Main extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Main}>\r\n                <div className={classes.Form}>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <h2>WeatherApplication</h2>\r\n\r\n                        <p>Enter the city</p>\r\n                    </div>\r\n                    <Form />\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Main;","import React, { Component } from 'react';\n//BrowserRouter\nimport { BrowserRouter } from 'react-router-dom';\n\n//css\n// import classes from './App.css';\n//Layout\nimport Layout from './hoc/Layout/Layout';\n//Main\nimport Main from './Containers/Main/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Layout>\n          <Main />\n        </Layout>\n      </BrowserRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer__Footer__1uXZe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main__Main__yx8BV\",\"Form\":\"Main__Form__1sZep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainForm\":\"Form__MainForm__2_sll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner__loader__2zW3P\",\"load8\":\"Spinner__load8__1B95Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result__Result__3wW6U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Error\":\"Error__Error__iP-Cu\"};"],"sourceRoot":""}